<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Course Enrollment</title>
</head>
<body>

    <div id="app" class="container mt-5">

        <h2 class="mb-4 text-center">Enroll Student in Course</h2>

        <div class="row">
            <!-- Column 1: Students -->
            <div class="col-md-3">
                <div class="form-group">
                    <label for="student">Student:</label>
                    <select v-model="newRelation.studentId" id="student" class="form-control form-control-lg" required>
                        <option v-for="student in students" :key="student.studentId" :value="student.studentId">
                            {{ student.name }}
                        </option>
                    </select>
                </div>
            </div>

            <!-- Column 2: Courses -->
            <div class="col-md-3">
                <div class="form-group">
                    <label for="course">Course:</label>
                    <select v-model="newRelation.courseId" id="course" class="form-control form-control-lg" required>
                        <option v-for="course in courses" :key="course.courseId" :value="course.courseId">
                            {{ course.courseName }}
                        </option>
                    </select>
                </div>
            </div>

            <!-- Column 3: Courses with Enrolled Students -->
            <div class="col-md-6">
                <h5 class="mb-3">Courses with Enrolled Students</h5>
                <div class="table-responsive">
                    <table class="table table-striped table-bordered">
                        <thead>
                            <tr>
                                <th>Course Name</th>
                                <th>Enrolled Students</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="course in coursesWithStudents" :key="course.courseId">
                                <td><strong>{{ course.courseName }}</strong></td>
                                <td>{{ course.students }}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Enroll Button and Enrolled Student Details -->
            <div class="col-md-3">
                <button class="btn btn-primary btn-block mb-4" type="button" v-on:click="enroll()">Enroll</button>

                <div v-if="enrolledStudent && enrolledCourse" class="mt-4">
                    <h5>Enrolled:</h5>
                    <p><strong>Student:</strong> {{ enrolledStudent.name }}</p>
                    <p><strong>Course:</strong> {{ enrolledCourse.courseName }}</p>
                    <button class="btn btn-info btn-block mt-2" v-on:click="showMoreInfo()">Show More Info</button>
                </div>
            </div>
        </div>

        <!-- Modal: Show More Info -->
        <div v-if="showInfoModal" class="modal fade show" tabindex="-1" role="dialog" style="display: block;" aria-hidden="false">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Students Enrolled in {{ enrolledCourse.courseName }}</h5>
                        <button type="button" class="close" v-on:click="closeModal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <ul class="list-group">
                            <li v-for="student in enrolledCourseStudents" :key="student.studentId" class="list-group-item">
                                {{ student.name }}
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>

    </div>



    <script>
        new Vue({
            el: '#app',
            data: {
                newRelation: {
                    studentId: 0,
                    courseId: 0
                },
                students: [],
                courses: [],
                enrolledStudent: null,
                enrolledCourse: null,
                enrolledCourseStudents: [],
                showInfoModal: false,
                coursesWithStudents: [] 

            },
            beforeMount() {
                this.fetchData();
                this.updateCoursesWithStudents();
            },
            methods: {
            async updateCoursesWithStudents() {
                try {
                    const response = await axios.get('Course/updateCoursesWithStudents');
                    this.coursesWithStudents = response.data;
                    console.log(response.data);
                } catch (error) {
                    console.error('Error fetching courses with students:', error);
                    alert('Could not load courses with students.');
                }
            },
                fetchData() {
                    // Fetch students
                    axios.get('/Student/GetAllStudents')
                        .then(response => {
                            this.students = response.data;
                        })
                        .catch(error => {
                            console.error('Error fetching students:', error);
                        });

                    // Fetch courses
                    axios.get('/Course/GetAllCourses')
                        .then(response => {
                            this.courses = response.data;
                        })
                        .catch(error => {
                            console.error('Error fetching courses:', error);
                        });
                },
                async enroll() {
                    try {
                        const response = await axios.post('/StudentCourse/Create', this.newRelation);

                        if (response.status === 200) {
                            this.enrolledStudent = this.students.find(student => student.studentId === this.newRelation.studentId);
                            this.enrolledCourse = this.courses.find(course => course.courseId === this.newRelation.courseId);
                            alert('Student enrolled successfully');
                            this.updateCoursesWithStudents();
                        }
                    } catch (error) {
                        console.error('Error submitting form:', error);
                        alert('An error occurred. Please try again.');
                    }
                },
                async showMoreInfo() {
                    try {
                        const response = await axios.get(`/Course/GetStudentsInCourse/${this.enrolledCourse.courseId}`);
                        this.enrolledCourseStudents = response.data;
                        this.showInfoModal = true;
                    } catch (error) {
                        console.error('Error fetching enrolled students:', error);
                        alert('Could not load students for this course.');
                    }
                },
                closeModal() {
                    this.showInfoModal = false;
                }
            }
        });
    </script>

</body>
</html>
